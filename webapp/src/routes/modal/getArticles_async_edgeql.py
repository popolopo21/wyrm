# AUTOGENERATED FROM 'webapp/src/routes/modal/getArticles.edgeql' WITH:
#     $ edgedb-py


from __future__ import annotations
import dataclasses
import datetime
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class getArticlesResult(NoPydanticValidation):
    id: uuid.UUID
    key: getArticlesResultKey
    grouping: list[str]
    elements: list[getArticlesResultElementsItem]


@dataclasses.dataclass
class getArticlesResultElementsItem(NoPydanticValidation):
    id: uuid.UUID
    tags: list[str] | None


@dataclasses.dataclass
class getArticlesResultKey(NoPydanticValidation):
    id: uuid.UUID
    hour: str


async def getArticles(
    executor: edgedb.AsyncIOExecutor,
    *,
    domain: str,
    start_date: datetime.datetime,
    end_date: datetime.datetime,
) -> list[getArticlesResult]:
    return await executor.query(
        """\
        with M:= (select Article {*}
            filter 
                .website.domain like <str>$domain and
                datetime_truncate(.a_published_at, "days") >= <datetime>$start_date and
                datetime_truncate(.a_published_at, "days") <= <datetime>$end_date)
        group M {tags}
        using hour := to_str(.a_published_at)[0:13]
        by hour;\
        """,
        domain=domain,
        start_date=start_date,
        end_date=end_date,
    )
