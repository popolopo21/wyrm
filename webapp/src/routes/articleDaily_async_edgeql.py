# AUTOGENERATED FROM 'webapp/src/routes/articleDaily.edgeql' WITH:
#     $ edgedb-py


from __future__ import annotations
import dataclasses
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class articleDailyResult(NoPydanticValidation):
    id: uuid.UUID
    key: articleDailyResultKey
    grouping: list[str]
    elements: list[articleDailyResultElementsItem]


@dataclasses.dataclass
class articleDailyResultElementsItem(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class articleDailyResultKey(NoPydanticValidation):
    id: uuid.UUID
    day: str


async def articleDaily(
    executor: edgedb.AsyncIOExecutor,
    *,
    domain: str,
) -> list[articleDailyResult]:
    return await executor.query(
        """\
        with M:= (select Article {*} filter .website.domain like <str>$domain)
        group M
        using day := to_str(.a_published_at)[0:10]
        by day\
        """,
        domain=domain,
    )
