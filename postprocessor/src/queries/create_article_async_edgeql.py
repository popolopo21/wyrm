# AUTOGENERATED FROM 'postprocessor/src/queries/create_article.edgeql' WITH:
#     $ edgedb-py


from __future__ import annotations
import dataclasses
import datetime
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateArticleResult(NoPydanticValidation):
    id: uuid.UUID


async def create_article(
    executor: edgedb.AsyncIOExecutor,
    *,
    title: str,
    description: str,
    authors: list[str],
    section: str,
    tags: list[str],
    content_text: str,
    title_embedding: list[float],
    description_embedding: list[float],
    a_published_at: datetime.datetime,
    a_modified_at: datetime.datetime,
    webpage_id: uuid.UUID,
) -> CreateArticleResult:
    return await executor.query_single(
        """\
        insert Article {
            title := <str>$title,
            description := <str>$description,
            authors := <array<str>>$authors,
            section := <str>$section,
            tags := <array<str>>$tags,
            content_text := <str>$content_text,
            title_embedding := <array<float32>>$title_embedding,
            description_embedding := <array<float32>>$description_embedding, 
            a_published_at := <datetime>$a_published_at,
            a_modified_at := <datetime>$a_modified_at,
            webpage := (select Webpage filter .id= <uuid>$webpage_id)
        };\
        """,
        title=title,
        description=description,
        authors=authors,
        section=section,
        tags=tags,
        content_text=content_text,
        title_embedding=title_embedding,
        description_embedding=description_embedding,
        a_published_at=a_published_at,
        a_modified_at=a_modified_at,
        webpage_id=webpage_id,
    )
